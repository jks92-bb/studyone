windows forms .net framework
콘솔앱 .net framework

닷넷 네트워크 확인

wpf ,unity - c#

시작 프로젝트 구성


보기 - 도구상자
button 
textbox

버튼 더블클릭

using = java의 import
namespace = 프로그램

"" 응용 java에도 이용가능.

[] java는 배열선언할때 앞뒤 든 상관없이 다 되었다.
double[] or
double or[]
[] C#은 앞에 있어야 함.
double[] or
[] C는 뒤에 있어야 함.
double or[]


윈도우 폼도 클래스다.

heap : 프로그램이 구동중일 때 할당하고 사용하는 메모리.
stack : 프로그램 시작 전에 미리 메모리 할당하는 부분.
partial class : 정의를 여러개로 나뉘어서 정의함.
C#에서는 ':' 이거가 JAVA에서의 확장임. extends

결국 배열자체도 클래스이다.
인스턴스 변수, 클래스 변수
static과 static 붙지 않은 차이는 무엇일까.

코드 가독성 높이기 위해 enum 사용함.

static 있는 변수 안에 static이 없는 변수는 못들어간다.
이유는 메모리구조 때문에 그렇다. 
static이 붙은 키워드가 메모리에 먼저 올라간다.
해결방법은 클래스안에 있는 전역변수를
main 문에서 새로운 객체를 만들어서 쓴다.
static을 넣어서 써도 된다.


캡슐화 : 메소드를 순서대로 바로 사용할 수 있게 적용한 것.


java super 와  C# base는 같은 것
c#이 원래 패키지 개념이 없다.
 
out 키워드를 사용하면 변수가 참조로 전달.
out 키워드를 사용한 매개변수는 함수 내부에서 무조건 값을 세팅.

인터페이스 - 규칙 규약. 모든 메서드는 public.
추상메서드만 가질 수 있다. abstract 키워드를 포함하진 않는다.
구현을 포함할 수 없다.
다중 상속을 지원한다.
즉 하나의 클래스에 한 가지 "이상"의 규칙을 부여할 수 있다.
즉 여러 개의 규칙 부여 가능함.

추상클래스 - public이어야하는 추상 메서드를 제외한 모든 멤버는 private으로도 선언될 수 있다.
모든 형태의 메서드를 가질 수 있다.
추상 메서드를 제외한 모든 메서드는 구현을 포함할 수 있다.




C++의 경우에는 하나 이상의 클래스를 상속 받을 수 있다.
C#,Java은 다중 상속을 허용하지 않음. 즉 하나만 상속받을 수 있음.

int로만 된 list 오름차순 정렬가능
Sort 자체가 IComparable 이 있어야 함.

인터페이스도 상속됨. (추상클래스도 상속됨).
인터페이스에서도 추상클래스처럼 public int Abe{get;set;} 이런거 추가가능.

예외 처리 에러.
1. 아예 실행 단됨.
2. 실해은 되는데 갑자기 꺼지는 에러(예외처리에러)
3. 실행은 되는데 내가 원하는 데로 실행 안할 때

람다. 델리게이터.
Delegate . 사용자 정의 자료형.

Callback함수.?


 // * C#에서는 Thread관련된 이슈가 있음.
 // CrossThread 이슈
 // Thread GUI쪽을 건드리게 되면 튕기는 오류 .
// 이 부분을 따로 처리하는 방법들이 있다. 참고.

linq - sql에서 들고옴.
링큐 문법 한줄인데 길다보니까 오류 있을시 찾기 힘들다.

C#에서는 json은 별도의 라이브러리가 있어야 읽을 수 있음.
ssms 한국어버전 다운.
ssms 다운

ssms  켜서 데이터베이스 생성.
생성된 데이터 베이스 테이블 생성. 
열이름 데이터 형식 작성.
 기본키 설정 할것. 
기본값 오늘날짜 함.
setCenter(0,0) - 주소
데이터 테이블. 
ssms
]


C#에서 사용되는 다양한 디자인 패턴이 있으며, 이러한 패턴은 코드의 재사용성, 유지 보수성, 가독성 및 확장성을 향상시키는 데 도움을 줍니다. 아래에 몇 가지 C# 디자인 패턴을 설명하겠습니다:

1. **Singleton 패턴**:
   - Singleton 패턴은 애플리케이션에서 특정 클래스의 인스턴스가 하나만 생성되도록 보장합니다.
   - 이 패턴은 전역 상태, 로깅, 데이터베이스 연결 및 캐시 관리 등과 같이 하나의 인스턴스만 필요한 경우에 유용합니다.
   - 이유) 특정 메서드를 클래스 메서드로 만들어도 되지만 이럴 경우엔 상속이 안 된다. 그리고속성(=변수)도 인스턴스 별로 따로 있는 게 아니고
       클래스 변수는 공유가 된다.	

2. **Factory Method 패턴**:
   - Factory Method 패턴은 객체 생성을 캡슐화하여 객체 생성 로직을 하위 클래스로 미루는 패턴입니다.
   - 이를 통해 하위 클래스가 어떤 클래스를 생성할지를 결정할 수 있습니다.

3. **Abstract Factory 패턴**:
   - Abstract Factory 패턴은 관련 객체 집합을 생성할 수 있는 인터페이스를 제공합니다.
   - 이 패턴은 상호 작용하는 객체 집합을 생성해야 하는 경우에 유용합니다.

4. **Builder 패턴**:
   - Builder 패턴은 복잡한 객체를 생성하는 과정을 분리하여 단계별로 진행할 수 있도록 합니다.
   - 이 패턴은 복잡한 객체를 구성하는 데 사용됩니다.

5. **Decorator 패턴**:
   - Decorator 패턴은 객체에 동적으로 새로운 책임을 추가할 수 있도록 합니다.
   - 이를 통해 클래스를 확장하거나 기능을 런타임에 추가할 수 있습니다.

6. **Observer 패턴**:
   - Observer 패턴은 객체 사이의 일대다 의존 관계를 정의합니다.
   - 이 패턴은 한 객체의 상태 변경이 다른 객체에게 통지될 때 사용됩니다.

7. **Strategy 패턴**:
   - Strategy 패턴은 알고리즘군을 정의하고 각각을 캡슐화하여 교환 가능하도록 만듭니다.
   - 이 패턴을 사용하면 실행 중에 알고리즘을 선택할 수 있습니다.

8. **Command 패턴**:
   - Command 패턴은 요청을 객체로 캡슐화하여 요청을 매개변수화, 큐 또는 로깅 및 취소 기능을 지원합니다.
   - 이 패턴은 작업을 실행, 취소 및 재실행할 수 있게 합니다.

9. **Proxy 패턴**:
   - Proxy 패턴은 다른 객체에 대한 인터페이스를 제공하며, 제어, 보안, 로깅 등을 추가로 제공하는 객체로 사용됩니다.

10. **MVC (Model-View-Controller) 패턴**:
    - MVC 패턴은 소프트웨어를 모델(데이터), 뷰(표시) 및 컨트롤러(로직)로 분리하여 관리합니다.
    - 이를 통해 애플리케이션의 구조를 깔끔하게 유지할 수 있습니다.

각 디자인 패턴은 특정 상황 또는 문제 해결을 위해 적합한 구조를 제공하며, 코드를 더 간결하고 관리하기 쉽게 만들어줍니다. 패턴을 선택할 때 문제의 복잡성과 요구 사항에 따라 적절한 패턴을 선택하는 것이 중요합니다.


